*magnum.txt*	Pure Vim script big integer library

Author: glts <676c7473@gmail.com>
License: Same terms as Vim itself (see |license|)

DESCRIPTION					*magnum*

Magnum is a big integer library written in Vim script.  It provides a small
set of predicates, arithmetic, and conversion operations.  It also includes a
simple random number generator.

Magnum has a lean user interface.  There is a single point of entry,
|magnum#Int|, which accepts a number or a string and returns an Integer
object.  All further interaction happens with such Integer objects.

This plugin requires the |Maktaba| library.

INTEGERS					*magnum-Integer*

"Integer" is the name given to the immutable multiple-precision integer data
type that lies at the heart of magnum.  You can obtain an instance of Integer
by calling |magnum#Int|.

Arithmetic and other operations are implemented as method calls on Integer
objects.  They are documented below.

						*magnum#Int*
magnum#Int({number})
magnum#Int({string} [, {base}])
			Creates a new Integer object.  The argument may be a
			{number}, or a {string} representing a number.  An
			optional {base} between 2 and 36 can be given to
			specify the radix of {string}.  Default is base 10.

			Throws |ERROR(WrongType)| for arguments of the wrong
			type.
			Throws |ERROR(BadValue)| for invalid {base}, and for
			a {string} that cannot be parsed.

In the following, {value} represents an Integer argument.  All methods throw
|ERROR(WrongType)| when passed an argument other than an Integer.

Predicates ~

Integer.Eq({value})	Returns true if Integer is equal to {value}, false
			otherwise.

Integer.Cmp({value})	Returns -1, 0, 1, depending on whether Integer is less
			than, equal, greater than {value}.

Integer.IsZero()	True if Integer is zero.
Integer.IsPositive()	True if Integer is positive.
Integer.IsNegative()	True if Integer is negative.
Integer.IsEven()	True if Integer is even.
Integer.IsOdd()		True if Integer is odd.

Arithmetic operators ~

Integer.Abs()		Returns the absolute value of Integer, | x |.

Integer.Neg()		Returns the negated value of Integer, -x.

Integer.Add({value})	Returns the sum of Integer and {value}, x + y.

Integer.Sub({value})	Returns the difference of Integer and {value}, x - y.

Integer.Mul({value})	Returns the product of Integer and {value}, x * y.

Integer.Div({value})	Divides Integer by {value} and returns the quotient,
			x / y.
			Throws |ERROR(BadValue)| on division by zero.

Integer.Rem({value})	Divides Integer by {value} and returns the remainder,
			x % y.
			Throws |ERROR(BadValue)| on division by zero.

Integer.DivRem({value})
			Divides Integer by {value} and returns the pair
			[quotient, remainder].
			Throws |ERROR(BadValue)| on division by zero.

Integer.Pow({number})	Raises Integer to the power of {number}, which must be
			a number, and returns the result, x^y.
			Throws |ERROR(WrongType)| when {number} is not a
			number.
			Throws |ERROR(BadValue)| when {number} is negative.

Accessor methods ~

Integer.Number()	Returns Integer as a Vim number.
			Throws "ERROR(NumberOverflow)" when the Integer does
			not fit in a number.

Integer.String([{base}])
			Returns Integer as a string.  An optional {base}
			between 2 and 36 can be given to specify the radix of
			the string representation.  Default is base 10.
			Throws |ERROR(WrongType)| when {base} is not a number.
			Throws |ERROR(BadValue)| for invalid {base}.

Constants ~
						*magnum#ZERO*
magnum#ZERO		The Integer value 0.
						*magnum#ONE*
magnum#ONE		The Integer value 1.

Note that you must qualify these variables with |g:| when using them inside a
function.

RANDOM INTEGERS					*magnum-random*

The function |magnum#random#NextInt| produces pseudo-random Integer values
within a range.

						*magnum#random#NextInt*
magnum#random#NextInt({value})
			Returns a new, randomly generated Integer between zero
			inclusive and Integer {value} exclusive.  The given
			{value} must be positive.
			Throws |ERROR(WrongType)| when {value} is not an
			Integer.
			Throws |ERROR(BadValue)| when {value} is not positive.

						*magnum#random#SetSeed*
magnum#random#SetSeed({number})
			Resets the state of the random number generator to the
			state derived from seed {number}.
			Throws |ERROR(WrongType)| when {number} is not a
			number.

 vim:tw=78:ts=8:ft=help:norl:
